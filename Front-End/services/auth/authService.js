// Services/authService.js
console.log("üöÄ === CHARGEMENT authService.js ===");

import { apiClient } from "../../config/apiConfig.js";

console.log("‚úÖ Import apiClient r√©ussi dans authService.js");

// ‚úÖ CORRECTION : Configuration unifi√©e sans conflit
const defaultConfig = {
  credentials: "include",
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
};

class AuthService {
  constructor() {
    console.log("üîß === D√âBUT constructor AuthService ===");
    try {
      // ‚úÖ NOUVELLE LOGIQUE UNIFI√âE : Uniquement cookies, suppression localStorage
      console.log("üîß Nouvelle logique unifi√©e : cookies uniquement");

      // Nettoyer localStorage existant si pr√©sent (migration automatique)
      const existingToken = localStorage.getItem("token");
      if (existingToken) {
        console.log("üîÑ Migration: Nettoyage localStorage existant");
        localStorage.removeItem("token");
        localStorage.removeItem("refreshToken");
        localStorage.removeItem("tokenExpiry");
        console.log("‚úÖ localStorage nettoy√© - Migration vers cookies");
      }

      // Plus de gestion _token interne
      this._token = null;
      this._authCheckInterval = null;
      console.log("üîß Variables internes initialis√©es");

      // Initialiser la v√©rification p√©riodique seulement si authentifi√© via cookies
      if (this.isAuthenticated()) {
        this.initAuthCheck();
        console.log(
          "üîß initAuthCheck() appel√© pour utilisateur authentifi√© via cookies"
        );
      } else {
        console.log(
          "‚ÑπÔ∏è Pas d'authentification via cookies - initAuthCheck() ignor√©"
        );
      }

      console.log("‚úÖ === FIN constructor AuthService - SUCC√àS ===");
    } catch (error) {
      console.error("‚ùå ERREUR dans constructor AuthService:", error);
      throw error;
    }
  }

  initAuthCheck() {
    if (this._authCheckInterval) {
      clearInterval(this._authCheckInterval);
    }
    // V√©rification de l'authentification toutes les 5 minutes
    this._authCheckInterval = setInterval(() => {
      this.checkAuth().catch(console.error);
    }, 5 * 60 * 1000);
  }

  async login(email, password) {
    console.log("[DEBUG] authService.login appel√©");
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient sans override
      const response = await apiClient.post("/auth/login", { email, password });

      // ‚úÖ NOUVELLE LOGIQUE : Plus de gestion token, les cookies sont automatiquement d√©finis
      if (response?.success) {
        console.log(
          "‚úÖ Login r√©ussi - Cookies automatiquement d√©finis par le serveur"
        );
        this.initAuthCheck();
        console.log(
          "Authentification r√©ussie, d√©clenchement de l'√©v√©nement login"
        );
        window.dispatchEvent(new Event("login"));
        return response;
      } else {
        throw new Error("Authentification √©chou√©e");
      }
    } catch (error) {
      console.error("[DEBUG] Erreur dans authService.login:", error);
      console.log("[DEBUG] Stack trace:", new Error().stack);
      this.handleAuthError(error);
      throw error;
    }
  }

  async register(userData) {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      const response = await apiClient.post("/auth/register", userData);

      // ‚úÖ NOUVELLE LOGIQUE : Plus de gestion token, les cookies sont automatiquement d√©finis
      if (response?.success) {
        console.log(
          "‚úÖ Register r√©ussi - Cookies automatiquement d√©finis par le serveur"
        );
        this.initAuthCheck();
        return response;
      } else {
        throw new Error("Inscription √©chou√©e");
      }
    } catch (error) {
      console.error("Erreur d'inscription:", error);
      this.handleAuthError(error);
      throw error;
    }
  }

  async checkAuth() {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      console.log("üîç V√©rification auth via cookies uniquement");
      const response = await apiClient.get("/auth/verify");

      const isAuthenticated = response?.success || false;
      console.log("‚úÖ V√©rification auth termin√©e:", isAuthenticated);
      return isAuthenticated;
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è Erreur lors de la v√©rification de l'authentification:",
        error
      );

      // Si erreur 401/403, effacer les cookies c√¥t√© client
      if (error.message?.includes("401") || error.message?.includes("403")) {
        console.log(
          "‚ö†Ô∏è Erreur 401/403 d√©tect√©e - Nettoyage cookies c√¥t√© client"
        );
        this.clearAuth();
      }
      return false;
    }
  }

  async logout() {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      await apiClient.post("/auth/logout", {});
    } catch (error) {
      console.error("Erreur lors de la d√©connexion:", error);
    } finally {
      this.clearAuth();
    }
  }

  isAuthenticated() {
    // ‚úÖ NOUVELLE LOGIQUE : Uniquement via cookies
    return this.hasAuthCookie();
  }

  getToken() {
    // ‚úÖ NOUVELLE LOGIQUE : Plus de gestion token interne, tout via cookies
    console.log("‚ö†Ô∏è getToken() obsol√®te - Utilisation automatique des cookies");
    return null;
  }

  async getProfile() {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      console.log("üîç Appel getProfile() avec cookies automatiques");
      console.log("üç™ Cookies actuels:", document.cookie);

      const response = await apiClient.get("/auth/profile");

      console.log("‚úÖ Profil r√©cup√©r√© via API:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du profil:", error);
      console.error("‚ùå D√©tails erreur:", {
        message: error.message,
        stack: error.stack,
      });

      // Ne pas appeler handleAuthError pour OAuth car cela cause des boucles
      if (error.message?.includes("401")) {
        console.log("‚ö†Ô∏è Erreur 401 - Cookie probablement expir√© ou invalide");
      }

      throw error;
    }
  }

  async updateProfile(profileData) {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      const response = await apiClient.put("/auth/profile", profileData);
      return response;
    } catch (error) {
      console.error("Erreur lors de la mise √† jour du profil:", error);
      this.handleAuthError(error);
      throw error;
    }
  }

  async requestPasswordReset(email) {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      return await apiClient.post("/auth/request-reset", { email });
    } catch (error) {
      console.error("Erreur lors de la demande de r√©initialisation:", error);
      throw error;
    }
  }

  async resetPassword(token, newPassword) {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      return await apiClient.post("/auth/reset-password", {
        token,
        newPassword,
      });
    } catch (error) {
      console.error(
        "Erreur lors de la r√©initialisation du mot de passe:",
        error
      );
      throw error;
    }
  }

  hasAuthCookie() {
    // V√©rifier le cookie 'auth=true' qui est accessible via JavaScript
    const cookies = document.cookie.split(";");
    const hasAuthTrue = cookies.some((cookie) =>
      cookie.trim().startsWith("auth=true")
    );

    console.log("üç™ V√©rification cookies d'authentification:", {
      cookies: document.cookie,
      hasAuthTrue,
      allCookies: cookies,
    });

    return hasAuthTrue;
  }

  clearAuth() {
    console.log("[DEBUG] authService.clearAuth appel√©");
    console.log("[DEBUG] Stack trace:", new Error().stack);

    // ‚úÖ NOUVELLE LOGIQUE : Plus de _token interne, plus de localStorage
    this._token = null;

    // Effacer les cookies c√¥t√© client (best effort)
    document.cookie =
      "auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    document.cookie = "auth=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

    if (this._authCheckInterval) {
      clearInterval(this._authCheckInterval);
      this._authCheckInterval = null;
    }

    console.log("‚úÖ Authentification nettoy√©e (cookies seulement)");
  }

  handleAuthError(error) {
    console.error("[DEBUG] authService.handleAuthError appel√©:", error);
    console.log("[DEBUG] Stack trace:", new Error().stack);
    console.log("[DEBUG] Chemin actuel:", window.location.pathname);

    // Au lieu de rediriger vers /login, rediriger vers /welcomepage
    if (window.location.pathname !== "/welcomepage") {
      console.log(
        "Redirection vers welcomepage suite √† une erreur d'authentification"
      );
      window.location.href = "/welcomepage";
    }

    // D√©clencher l'√©v√©nement logout
    window.dispatchEvent(new Event("logout"));
  }

  async refreshToken() {
    try {
      // ‚úÖ CORRECTION : Utiliser seulement apiClient
      const response = await apiClient.post("/auth/refresh", {});

      // ‚úÖ NOUVELLE LOGIQUE : Plus de gestion localStorage
      if (response?.success) {
        console.log("‚úÖ Token rafra√Æchi via cookies");
        return response;
      } else {
        throw new Error("Rafra√Æchissement √©chou√©");
      }
    } catch (error) {
      console.error("Erreur lors du rafra√Æchissement du token:", error);
      // Plus de localStorage √† nettoyer
      window.dispatchEvent(new Event("logout"));
      throw error;
    }
  }
}

// Export d'une instance unique du service
export const authService = new AuthService();

// üî• CRITIQUE: Rendre authService disponible globalement pour √©viter les probl√®mes d'import
window.authService = authService;
console.log("üåê authService rendu disponible globalement");
