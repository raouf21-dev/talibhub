CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, -- Assurez-vous que les mots de passe sont hachés
    email VARCHAR(100) UNIQUE NOT NULL,
    email_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    age INT,
    gender VARCHAR(10),
    country VARCHAR(100)
);

ALTER TABLE users ADD COLUMN reset_password_token VARCHAR(255);
ALTER TABLE users ADD COLUMN reset_password_expires TIMESTAMP;

-- Modifications OAuth pour l'authentification sociale
ALTER TABLE users ADD COLUMN oauth_provider VARCHAR(20);
ALTER TABLE users ADD COLUMN oauth_id VARCHAR(255);
ALTER TABLE users ADD COLUMN oauth_email VARCHAR(320);
ALTER TABLE users ADD COLUMN oauth_profile_data JSONB;
ALTER TABLE users ADD COLUMN is_oauth_user BOOLEAN DEFAULT FALSE;

-- Modifier la colonne password pour la rendre nullable (pour les utilisateurs OAuth)
ALTER TABLE users ALTER COLUMN password DROP NOT NULL;

-- Contraintes OAuth pour assurer l'intégrité des données
ALTER TABLE users ADD CONSTRAINT unique_oauth_provider_id 
    UNIQUE (oauth_provider, oauth_id);

-- Index OAuth pour améliorer les performances
CREATE INDEX idx_users_oauth_provider ON users(oauth_provider);
CREATE INDEX idx_users_oauth_id ON users(oauth_id);
CREATE INDEX idx_users_oauth_email ON users(oauth_email);
CREATE INDEX idx_users_is_oauth_user ON users(is_oauth_user);

-- Mettre à jour les utilisateurs existants (non-OAuth)
UPDATE users 
SET is_oauth_user = FALSE
WHERE is_oauth_user IS NULL;

----------------------------

CREATE TABLE tasks (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    user_id INT REFERENCES users(id) ON DELETE CASCADE
);

 CREATE TABLE sessions (
     id SERIAL PRIMARY KEY,
     task_id INTEGER,
     user_id INTEGER NOT NULL,
     total_work_time INTEGER NOT NULL DEFAULT 0,
     timer_time INTEGER NOT NULL DEFAULT 0,
     stopwatch_time INTEGER NOT NULL DEFAULT 0,
     counter_value INTEGER NOT NULL DEFAULT 0,--     
     created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
     task_name_snapshot VARCHAR(255),
     FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE SET NULL,
     FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


CREATE TABLE counters (
    id SERIAL PRIMARY KEY,
    value INT NOT NULL,
    user_id INT REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    content TEXT NOT NULL,
    time TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    user_id INT REFERENCES users(id) ON DELETE CASCADE
);

--------------Timer----------------

CREATE TABLE timer_state (
    user_id INT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    is_running BOOLEAN NOT NULL,
    is_work_session BOOLEAN NOT NULL,
    work_duration INT NOT NULL,
    break_duration INT NOT NULL,
    current_timer INT NOT NULL
);

CREATE TABLE completed_tasks (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id) ON DELETE CASCADE,
    task_name VARCHAR(255) NOT NULL,
    value INT NOT NULL,
    type VARCHAR(50) NOT NULL,
    date DATE NOT NULL
);

--------------Sourates----------------

-- Table des sourates (existante)
CREATE TABLE sourates (
    number INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    arabic VARCHAR(255) NOT NULL
);

-- Table pour le système de mémorisation des sourates (flashcards)
CREATE TABLE surah_memorization (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id) ON DELETE CASCADE,
    surah_number INT REFERENCES sourates(number) ON DELETE CASCADE,
    memorization_level VARCHAR(20), -- Strong, Good, Moderate, Weak
    last_revision_date DATE DEFAULT CURRENT_DATE,
    next_revision_date DATE,
    is_available_for_revision BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (user_id, surah_number)
);

-- Index pour améliorer les performances
CREATE INDEX idx_surah_memorization_user_id ON surah_memorization(user_id);
CREATE INDEX idx_surah_memorization_next_revision ON surah_memorization(next_revision_date) WHERE is_available_for_revision = TRUE;

-- Table des sourates connues (pour le système de récitation dans surahSelector.js)
CREATE TABLE known_sourates (
    user_id INT REFERENCES users(id) ON DELETE CASCADE,
    sourate_number INT REFERENCES sourates(number) ON DELETE CASCADE,
    PRIMARY KEY (user_id, sourate_number)
);

-- Migration : Si la table surah_memorization existe déjà avec is_known, renommer la colonne
-- Commenter/décommenter selon le besoin
-- ALTER TABLE surah_memorization RENAME COLUMN is_known TO is_available_for_revision;

-- Table pour suivre les récitations individuelles
CREATE TABLE sourate_recitations (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id) ON DELETE CASCADE,
    sourate_number INT,
    recitation_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    cycle_id INT
);

-- Table pour suivre les cycles de récitation
CREATE TABLE recitation_cycles (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id) ON DELETE CASCADE,
    start_date TIMESTAMP WITH TIME ZONE,
    end_date TIMESTAMP WITH TIME ZONE,
    is_complete BOOLEAN DEFAULT FALSE
);

-- Indices pour améliorer les performances
CREATE INDEX idx_sourate_recitations_user_id ON sourate_recitations(user_id);
CREATE INDEX idx_sourate_recitations_cycle_id ON sourate_recitations(cycle_id);
CREATE INDEX idx_recitation_cycles_user_id ON recitation_cycles(user_id);



-- Optionally, populate the table with initial data
INSERT INTO sourates (number, name, arabic) VALUES
(1, 'Al-Fatiha', 'الفاتحة'),
(2, 'Al-Baqarah', 'البقرة'),
(3, 'Aal-E-Imran', 'آل عمران'),
(4, 'An-Nisa', 'النساء'),
(5, 'Al-Maidah', 'المائدة'),
(6, 'Al-Anam', 'الأنعام'),
(7, 'Al-Araf', 'الأعراف'),
(8, 'Al-Anfal', 'الأنفال'),
(9, 'At-Tawbah', 'التوبة'),
(10, 'Yunus', 'يونس'),
(11, 'Hud', 'هود'),
(12, 'Yusuf', 'يوسف'),
(13, 'Ar-Rad', 'الرعد'),
(14, 'Ibrahim', 'إبراهيم'),
(15, 'Al-Hijr', 'الحجر'),
(16, 'An-Nahl', 'النحل'),
(17, 'Al-Isra', 'الإسراء'),
(18, 'Al-Kahf', 'الكهف'),
(19, 'Maryam', 'مريم'),
(20, 'Ta-Ha', 'طه'),
(21, 'Al-Anbiya', 'الأنبياء'),
(22, 'Al-Hajj', 'الحج'),
(23, 'Al-Muminun', 'المؤمنون'),
(24, 'An-Nur', 'النور'),
(25, 'Al-Furqan', 'الفرقان'),
(26, 'Ash-Shuara', 'الشعراء'),
(27, 'An-Naml', 'النمل'),
(28, 'Al-Qasas', 'القصص'),
(29, 'Al-Ankabut', 'العنكبوت'),
(30, 'Ar-Rum', 'الروم'),
(31, 'Luqman', 'لقمان'),
(32, 'As-Sajda', 'السجدة'),
(33, 'Al-Ahzab', 'الأحزاب'),
(34, 'Saba', 'سبأ'),
(35, 'Fatir', 'فاطر'),
(36, 'Ya-Sin', 'يس'),
(37, 'As-Saffat', 'الصافات'),
(38, 'Sad', 'ص'),
(39, 'Az-Zumar', 'الزمر'),
(40, 'Ghafir', 'غافر'),
(41, 'Fussilat', 'فصلت'),
(42, 'Ash-Shura', 'الشورى'),
(43, 'Az-Zukhruf', 'الزخرف'),
(44, 'Ad-Dukhan', 'الدخان'),
(45, 'Al-Jathiya', 'الجاثية'),
(46, 'Al-Ahqaf', 'الأحقاف'),
(47, 'Muhammad', 'محمد'),
(48, 'Al-Fath', 'الفتح'),
(49, 'Al-Hujurat', 'الحجرات'),
(50, 'Qaf', 'ق'),
(51, 'Adh-Dhariyat', 'الذاريات'),
(52, 'At-Tur', 'الطور'),
(53, 'An-Najm', 'النجم'),
(54, 'Al-Qamar', 'القمر'),
(55, 'Ar-Rahman', 'الرحمن'),
(56, 'Al-Waqia', 'الواقعة'),
(57, 'Al-Hadid', 'الحديد'),
(58, 'Al-Mujadila', 'المجادلة'),
(59, 'Al-Hashr', 'الحشر'),
(60, 'Al-Mumtahina', 'الممتحنة'),
(61, 'As-Saff', 'الصف'),
(62, 'Al-Jumua', 'الجمعة'),
(63, 'Al-Munafiqun', 'المنافقون'),
(64, 'At-Taghabun', 'التغابن'),
(65, 'At-Talaq', 'الطلاق'),
(66, 'At-Tahrim', 'التحريم'),
(67, 'Al-Mulk', 'الملك'),
(68, 'Al-Qalam', 'القلم'),
(69, 'Al-Haaqqa', 'الحاقة'),
(70, 'Al-Maarij', 'المعارج'),
(71, 'Nuh', 'نوح'),
(72, 'Al-Jinn', 'الجن'),
(73, 'Al-Muzzammil', 'المزمل'),
(74, 'Al-Muddathir', 'المدثر'),
(75, 'Al-Qiyama', 'القيامة'),
(76, 'Al-Insan', 'الإنسان'),
(77, 'Al-Mursalat', 'المرسلات'),
(78, 'An-Naba', 'النبأ'),
(79, 'An-Naziat', 'النازعات'),
(80, 'Abasa', 'عبس'),
(81, 'At-Takwir', 'التكوير'),
(82, 'Al-Infitar', 'الإنفطار'),
(83, 'Al-Mutaffifin', 'المطففين'),
(84, 'Al-Inshiqaq', 'الإنشقاق'),
(85, 'Al-Burooj', 'البروج'),
(86, 'At-Tariq', 'الطارق'),
(87, 'Al-Ala', 'الأعلى'),
(88, 'Al-Ghashiya', 'الغاشية'),
(89, 'Al-Fajr', 'الفجر'),
(90, 'Al-Balad', 'البلد'),
(91, 'Ash-Shams', 'الشمس'),
(92, 'Al-Lail', 'الليل'),
(93, 'Ad-Duha', 'الضحى'),
(94, 'Ash-Sharh', 'الشرح'),
(95, 'At-Tin', 'التين'),
(96, 'Al-Alaq', 'العلق'),
(97, 'Al-Qadr', 'القدر'),
(98, 'Al-Bayyina', 'البينة'),
(99, 'Az-Zalzala', 'الزلزلة'),
(100, 'Al-Adiyat', 'العاديات'),
(101, 'Al-Qaria', 'القارعة'),
(102, 'At-Takathur', 'التكاثر'),
(103, 'Al-Asr', 'العصر'),
(104, 'Al-Humaza', 'الهمزة'),
(105, 'Al-Fil', 'الفيل'),
(106, 'Quraish', 'قريش'),
(107, 'Al-Maun', 'الماعون'),
(108, 'Al-Kawthar', 'الكوثر'),
(109, 'Al-Kafirun', 'الكافرون'),
(110, 'An-Nasr', 'النصر'),
(111, 'Al-Masad', 'المسد'),
(112, 'Al-Ikhlas', 'الإخلاص'),
(113, 'Al-Falaq', 'الفلق'),
(114, 'An-Nas', 'الناس');


CREATE TABLE known_sourates (
    user_id INT REFERENCES users(id) ON DELETE CASCADE,
    sourate_number INT REFERENCES sourates(number) ON DELETE CASCADE,
    PRIMARY KEY (user_id, sourate_number)
);

//--------MosqueTimes------------//

-- Table des mosquées
CREATE TABLE mosques (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    city VARCHAR(100) NOT NULL, -- Nouvelle colonne pour la ville
    latitude DECIMAL(10, 8) NOT NULL,
    longitude DECIMAL(11, 8) NOT NULL
);


-- Extensions pour les fonctions géospatiales
CREATE EXTENSION IF NOT EXISTS cube;
CREATE EXTENSION IF NOT EXISTS earthdistance;

-- Index spatial pour la recherche géographique rapide
CREATE INDEX idx_mosques_location ON mosques USING gist (ll_to_earth(latitude, longitude));

-- Index sur la colonne city pour accélérer les recherches par ville
CREATE INDEX idx_mosques_city ON mosques (city);

-- Table des horaires de prière
CREATE TABLE prayer_times (
    id SERIAL PRIMARY KEY,
    mosque_id INTEGER REFERENCES mosques(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    fajr TIME,
    dhuhr TIME,
    asr TIME,
    maghrib TIME,
    isha TIME,
    jumuah1 TIME,
    jumuah2 TIME,
    jumuah3 TIME,
    tarawih TIME,
    UNIQUE (mosque_id, date) -- Assure l'unicité des horaires par mosquée et date
);

-- Index pour améliorer les performances des requêtes sur prayer_times
CREATE INDEX idx_prayer_times_mosque_date ON prayer_times (mosque_id, date);

Table : surah_memorization
Colonnes :
id SERIAL PRIMARY KEY
user_id INTEGER UNIQUE
surah_number INTEGER UNIQUE
memorization_level VARCHAR(20)
last_revision_date DATE DEFAULT CURRENT_DATE
next_revision_date DATE
is_known BOOLEAN DEFAULT true
Contraintes :
unique_user_surah UNIQUE (user_id, surah_number)
surah_memorization_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users (id) ON UPDATE NO ACTION ON DELETE CASCADE
surah_memorization_surah_number_fkey FOREIGN KEY (surah_number) REFERENCES public.sourates (number) ON UPDATE NO ACTION ON DELETE CASCADE
surah_memorization_pkey PRIMARY KEY (id)
Indexes :
UNIQUE INDEX surah_memorization_pkey USING BTREE (id)
UNIQUE INDEX unique_user_surah USING BTREE (user_id, surah_number)

-- Instructions pour corriger la préservation des statistiques après suppression de tâches

-- 1. Modifier la contrainte de clé étrangère pour préserver les sessions
-- Supprimer l'ancienne contrainte CASCADE
ALTER TABLE sessions DROP CONSTRAINT sessions_task_id_fkey;

-- Ajouter une colonne pour sauvegarder le nom de la tâche
ALTER TABLE sessions ADD COLUMN task_name_snapshot VARCHAR(255);

-- Mettre à jour les sessions existantes avec le nom actuel de leur tâche
UPDATE sessions 
SET task_name_snapshot = t.name 
FROM tasks t 
WHERE sessions.task_id = t.id AND sessions.task_name_snapshot IS NULL;

-- Modifier task_id pour permettre NULL (sessions orphelines)
ALTER TABLE sessions ALTER COLUMN task_id DROP NOT NULL;

-- Ajouter nouvelle contrainte qui préserve les sessions quand une tâche est supprimée
ALTER TABLE sessions ADD CONSTRAINT sessions_task_id_fkey 
    FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE SET NULL;

-- Créer un index pour améliorer les performances des requêtes de statistiques
CREATE INDEX idx_sessions_created_at ON sessions(created_at);
CREATE INDEX idx_sessions_user_id_created_at ON sessions(user_id, created_at);

-- 2. Créer un trigger pour automatiquement sauvegarder le nom de la tâche lors de l'insertion
CREATE OR REPLACE FUNCTION save_task_name_snapshot()
RETURNS TRIGGER AS $$
BEGIN
    -- Si task_id n'est pas NULL, récupérer le nom de la tâche
    IF NEW.task_id IS NOT NULL THEN
        SELECT name INTO NEW.task_name_snapshot 
        FROM tasks 
        WHERE id = NEW.task_id;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Attacher le trigger à la table sessions
CREATE TRIGGER trigger_save_task_name_snapshot
    BEFORE INSERT OR UPDATE ON sessions
    FOR EACH ROW
    EXECUTE FUNCTION save_task_name_snapshot();

-- 3. Créer également un trigger pour mettre à jour le snapshot si le nom de la tâche change
CREATE OR REPLACE FUNCTION update_task_name_snapshots()
RETURNS TRIGGER AS $$
BEGIN
    -- Mettre à jour tous les snapshots des sessions liées à cette tâche
    UPDATE sessions 
    SET task_name_snapshot = NEW.name
    WHERE task_id = NEW.id;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Attacher le trigger à la table tasks
CREATE TRIGGER trigger_update_task_name_snapshots
    AFTER UPDATE OF name ON tasks
    FOR EACH ROW
    WHEN (OLD.name IS DISTINCT FROM NEW.name)
    EXECUTE FUNCTION update_task_name_snapshots();